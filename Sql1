
CREATE TABLE employee (
  emp_id INT PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(40),
  birth_day DATE,
  sex VARCHAR(1),
  salary INT,
  super_id INT,
  branch_id INT
);

CREATE TABLE branch (
  branch_id INT PRIMARY KEY,
  branch_name VARCHAR(40),
  mgr_id INT,
  mgr_start_date DATE,
  FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);

ALTER TABLE employee
ADD FOREIGN KEY(branch_id)
REFERENCES branch(branch_id)
ON DELETE SET NULL;

ALTER TABLE employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;

CREATE TABLE client (
  client_id INT PRIMARY KEY,
  client_name VARCHAR(40),
  branch_id INT,
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL
);

CREATE TABLE works_with (
  emp_id INT,
  client_id INT,
  total_sales INT,
  PRIMARY KEY(emp_id, client_id),
  FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,
  FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);

CREATE TABLE branch_supplier (
  branch_id INT,
  supplier_name VARCHAR(40),
  supply_type VARCHAR(40),
  PRIMARY KEY(branch_id, supplier_name),
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);


-- -----------------------------------------------------------------------------

-- Corporate
INSERT INTO employee VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL);

INSERT INTO branch VALUES(1, 'Corporate', 100, '2006-02-09');

UPDATE employee
SET branch_id = 1
WHERE emp_id = 100;

INSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);

-- Scranton
INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);

INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');

UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;

INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);

-- Stamford
INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');

UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;

INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);


-- BRANCH SUPPLIER
INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');

-- CLIENT
INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);

-- WORKS_WITH
INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);


---Select
SELECT * FROM employee
SELECT * FROM branch
SELECT * FROM client 
SELECT * FROM works_with
SELECT * FROM branch_supplier

--Find all Employees
SELECT * FROM employee
--Find all Clients
SELECT * FROM client
--All EMPLOYEE order by slaary
SELECT *
FROM employee
ORDER BY salary DESC
--- Find all employees ordered by Sex then name
SELECT *
FROM employee
ORDER BY sex,first_name,last_name   
---First 5 EMployees in table
SELECT * 
FROM employee 
LIMIT 5 
---find the first and last name of employees
SELECT first_name AS forename,last_name AS surname
FROM employee
---Find out the differnet genders
SELECT DISTINCT sex
FROM employee
SELECT DISTINCT branch_id
FROM employee
SELECT sex from employee
-------SQL Functions----------
SELECT COUNT(emp_id)
FROM employee

--find the number of females born after 1970
SELECT COUNT(emp_id)
FROM employee
WHERE sex = 'F' AND birth_day > '1970-01-01'
--find the averga eof all employee's salary
SELECT AVG(salary)
FROM employee
WHERE sex = 'M'
--Sum
SELECT SUM(salary)
FROM employee
WHERE sex = 'M'

-----Aggregation
SELECT COUNT(sex),sex
FROM employee
GROUP BY sex

--Find the sales of each employee
SELECT SUM(total_sales),emp_id
FROM works_with
GROUP By emp_id
--Find the total sales of each salesman
SELECT SUM(total_sales),client_id
FROM works_with
GROUP BY client_id

----Wildcards----% = and # characters, _ = one character
-- Find and client who are an LLC
SELECT * 
FROM client
WHERE client_name LIKE '%LLC'

--Find any branch suppliers who are in the label business
SELECT * 
FROM branch_supplier
WHERE supplier_name LIKE '%Label%'

--Find the employee born in oct
SELECT *
FROM employee
WHERE birth_day LIKE '____-10%'

--Find any clients who arec school
SELECT * 
FROM client
WHERE client_name LIKE '%school%'

---U0nion---
----Find a list of employee and branch name
---Same no of col and same data type
SELECT first_name AS Company_Names
FROM employee
UNION
SELECT branch_name
FROM branch
UNION
SELECT client_name
FROM client
----Find a list of all clients and branch suppliers name
SELECT client_name,client.branch_id
FROM client
UNION 
SELECT supplier_name,branch_supplier.branch_id
FROM branch_supplier

---Find all the money spent and earned by the company
SELECT total_sales
FROM works_with
UNION
SELECT salary
from employee

--------Joins ----
INSERT INTO branch VALUES(4,"Buffalo",NULL,NULL)
SELECT *FROM branch

---Find all branches and the names of their manager
----Inner join----
SELECT employee.emp_id,employee.first_name,branch.branch_name
FROM employee
JOIN branch
ON employee.emp_id = branch.mgr_id
-----LEFT JOin---
SELECT employee.emp_id,employee.first_name,branch.branch_name
FROM employee
RIGHT JOIN branch
ON employee.emp_id = branch.mgr_id
-----FULL Join------




----NESTED QUERIES---------
---Find names of all employees who have sold over 30000 to a sigle client
SELECT employee.first_name,employee.last_name
FROM employee
WHERE employee.emp_id IN(
    SELECT works_with.emp_id
    FROM works_with
    WHERE total_sales>30000
)

--find all clients who are handled by the branch that michael scott manages 
--assure you know michael's id
SELECT client_name
FROM client
WHERE client.branch_id = (
    SELECT branch.branch_id
    FROM branch
    WHERE branch.mgr_id = (
        SELECT employee.emp_id
        FROM employee
        WHERE first_name = 'Michael'
    )
)
SELECT * from employee
SELECT * from branch

---------DELETE------------
---ON DELETE SET NULL
---ON DELETE CASCADE
DELETE FROM employee
WHERE emp_id = 102;

SELECT * from branch

------triggers-------------
CREATE TABLE trigger_test(
    message VARCHAR(100)
);

DELIMITER $$
CREATE 
    TRIGGER my_trigger BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES('Added new employee');
    END$$
DELIMITER ;

INSERT INTO employee VALUES(110, 'Prince', 'William', '2000-08-23', 'M', 110000, 101,4);

SELECT * from employee
SELECT * FROM trigger_test
DELIMITER $$
CREATE 
    TRIGGER my_trigger1 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES(NEW.first_name);
    END$$
DELIMITER ;

INSERT INTO employee VALUES(111, 'Prince', 'Harry', '2004-03-09', 'M', 110001, 103,3);

SELECT * FROM trigger_test

DELIMITER $$
CREATE 
    TRIGGER my_trigger1 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        IF NEW.sex = 'M' THEN
            INSERT INTO trigger_test VALUES("Male Added");
        ELSEIF NEW.sex = 'F' THEN
            INSERT INTO trigger_test VALUES("Female Added");
        ELSE
            INSERT INTO trigger_test VALUES("add another employee");
        END IF;
    END$$
DELIMITER ;
--DROP TRIGGER my_trigger;
------ENTITY RELATIONSHIP DIAGRAm



